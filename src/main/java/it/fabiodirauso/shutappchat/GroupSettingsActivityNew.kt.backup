package it.fabiodirauso.shutappchat

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.*
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.switchmaterial.SwitchMaterial
import it.fabiodirauso.shutappchat.adapter.GroupMembersAdapter
import it.fabiodirauso.shutappchat.managers.GroupRepository
import it.fabiodirauso.shutappchat.model.GroupEntity
import it.fabiodirauso.shutappchat.model.GroupMemberEntity
import it.fabiodirauso.shutappchat.model.GroupMode
import it.fabiodirauso.shutappchat.model.GroupRole
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch

/**
 * Activity per gestire le impostazioni del gruppo
 * - Modifica nome/descrizione/modalit
 * - Gestione membri (aggiungi/rimuovi/cambia ruolo)
 * - Elimina gruppo
 */
class GroupSettingsActivity : AppCompatActivity() {
    
    private lateinit var groupRepository: GroupRepository
    private lateinit var membersAdapter: GroupMembersAdapter
    
    private var groupId: String = ""
    private var group: GroupEntity? = null
    private var members: List<GroupMemberEntity> = emptyList()
    private var currentUserId: Long = 0
    private var isUserAdmin: Boolean = false
    
    private lateinit var editTextGroupName: EditText
    private lateinit var editTextGroupDescription: EditText
    private lateinit var switchGroupMode: SwitchMaterial
    private lateinit var recyclerViewMembers: RecyclerView
    private lateinit var buttonSaveChanges: Button
    private lateinit var buttonDeleteGroup: Button
    private lateinit var buttonLeaveGroup: Button
    private lateinit var buttonAddMembers: Button
    
    private val groupUpdateReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            when (intent?.action) {
                "it.fabiodirauso.shutappchat.GROUP_UPDATED" -> {
                    val updatedGroupId = intent.getStringExtra("group_id")
                    if (updatedGroupId == groupId) {
                        Log.d("GroupSettings", "Group updated event received, refreshing...")
                        lifecycleScope.launch {
                            groupRepository.refreshGroupMembers(groupId)
                            groupRepository.refreshGroupInfo(groupId)
                        }
                    }
                }
            }
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        setContentView(R.layout.activity_group_settings)
        
        // Enable fullscreen immersive mode
        it.fabiodirauso.shutappchat.utils.UIHelper.enableImmersiveMode(this)
        
        groupId = intent.getStringExtra(EXTRA_GROUP_ID) ?: run {
            Toast.makeText(this, "Errore: ID gruppo mancante", Toast.LENGTH_SHORT).show()
            finish()
            return
        }
        
        groupRepository = GroupRepository.getInstance(this)
        currentUserId = getSharedPreferences("app_prefs", MODE_PRIVATE).getLong("user_id", 0)
        
        setupToolbar()
        setupViews()
        setupRecyclerView()
        setupClickListeners()
        
        loadGroupData()
        loadMembers()
    }
    
    override fun onResume() {
        super.onResume()
        val filter = IntentFilter("it.fabiodirauso.shutappchat.GROUP_UPDATED")
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
            registerReceiver(groupUpdateReceiver, filter, Context.RECEIVER_NOT_EXPORTED)
        } else {
            registerReceiver(groupUpdateReceiver, filter)
        }
    }
    
    override fun onPause() {
        super.onPause()
        try {
            unregisterReceiver(groupUpdateReceiver)
        } catch (e: Exception) {
            // Already unregistered
        }
    }
    
    private fun setupToolbar() {
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.title = "Impostazioni Gruppo"
    }
    
    private fun setupViews() {
        editTextGroupName = findViewById(R.id.editTextGroupName)
        editTextGroupDescription = findViewById(R.id.editTextGroupDescription)
        switchGroupMode = findViewById(R.id.switchGroupMode)
        recyclerViewMembers = findViewById(R.id.recyclerViewMembers)
        buttonSaveChanges = findViewById(R.id.buttonSaveChanges)
        buttonDeleteGroup = findViewById(R.id.buttonDeleteGroup)
        buttonLeaveGroup = findViewById(R.id.buttonLeaveGroup)
        buttonAddMembers = findViewById(R.id.buttonAddMembers)
    }
    
    private fun setupRecyclerView() {
        membersAdapter = GroupMembersAdapter(
            currentUserId = currentUserId,
            isCurrentUserAdmin = false, // Will be updated
            onRemoveMember = { member -> removeMember(member) },
            onChangeRole = { member -> changeMemberRole(member) }
        )
        
        recyclerViewMembers.apply {
            layoutManager = LinearLayoutManager(this@GroupSettingsActivity)
            adapter = membersAdapter
        }
    }
    
    private fun setupClickListeners() {
        buttonSaveChanges.setOnClickListener {
            saveChanges()
        }
        
        buttonAddMembers.setOnClickListener {
            showAddMembersDialog()
        }
        
        buttonDeleteGroup.setOnClickListener {
            showDeleteGroupDialog()
        }
        
        buttonLeaveGroup.setOnClickListener {
            showLeaveGroupDialog()
        }
    }
    
    
    
    private fun loadGroupData() {
        lifecycleScope.launch {
            groupRepository.observeGroup(groupId).collectLatest { groupEntity ->
                group = groupEntity
                updateUI()
            }
        }
        
        // Refresh from server
        lifecycleScope.launch {
            try {
                groupRepository.refreshGroupInfo(groupId)
            } catch (e: Exception) {
                Log.e("GroupSettings", "Error loading group info", e)
                if (group == null) {
                    Toast.makeText(
                        this@GroupSettingsActivity,
                        "Impossibile caricare i dati",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
        }
    }
    
    private fun loadMembers() {
        lifecycleScope.launch {
            groupRepository.observeGroupMembers(groupId).collectLatest { membersList ->
                members = membersList
                
                // Check if current user is admin
                val currentMember = membersList.find { it.userId == currentUserId }
                isUserAdmin = currentMember?.role == GroupRole.ADMIN
                
                // Update adapter
                membersAdapter.updateMembers(membersList)
                membersAdapter.updateAdminStatus(isUserAdmin)
                
                // Update UI permissions
                updatePermissions()
            }
        }
        
        // Refresh from server
        lifecycleScope.launch {
            try {
                groupRepository.refreshGroupMembers(groupId)
            } catch (e: Exception) {
                Log.e("GroupSettings", "Error loading members", e)
            }
        }
    }
    
    private fun updateUI() {
        group?.let {
            editTextGroupName.setText(it.groupName)
            editTextGroupDescription.setText(it.groupDescription ?: "")
            switchGroupMode.isChecked = (it.groupMode == GroupMode.RESTRICTED)
        }
    }
    
    private fun updatePermissions() {
        val editable = isUserAdmin
        
        editTextGroupName.isEnabled = editable
        editTextGroupDescription.isEnabled = editable
        switchGroupMode.isEnabled = editable
        buttonSaveChanges.isEnabled = editable
        buttonSaveChanges.visibility = if (editable) View.VISIBLE else View.GONE
        buttonDeleteGroup.visibility = if (editable) View.VISIBLE else View.GONE
        buttonLeaveGroup.visibility = if (!editable) View.VISIBLE else View.GONE
        buttonAddMembers.isEnabled = editable
        buttonAddMembers.visibility = if (editable) View.VISIBLE else View.GONE
        
        // Update adapter admin status
        membersAdapter.updateAdminStatus(editable)
    }
    
    private fun saveChanges() {
        if (!isUserAdmin) {
            Toast.makeText(this, "Solo gli admin possono modificare", Toast.LENGTH_SHORT).show()
            return
        }
        
        val newName = editTextGroupName.text.toString().trim()
        val newDescription = editTextGroupDescription.text.toString().trim()
        val newMode = if (switchGroupMode.isChecked) "RESTRICTED" else "OPEN"
        
        if (newName.isBlank()) {
            Toast.makeText(this, "Inserisci un nome per il gruppo", Toast.LENGTH_SHORT).show()
            return
        }
        
        lifecycleScope.launch {
            buttonSaveChanges.isEnabled = false
            
            val result = groupRepository.updateGroupSettings(
                groupId = groupId,
                name = newName,
                description = newDescription.takeIf { it.isNotBlank() },
                mode = newMode
            )
            
            buttonSaveChanges.isEnabled = true
            
            if (result.isSuccess) {
                Toast.makeText(
                    this@GroupSettingsActivity,
                    "Impostazioni aggiornate",
                    Toast.LENGTH_SHORT
                ).show()
            } else {
                Toast.makeText(
                    this@GroupSettingsActivity,
                    "Errore aggiornamento: ${result.exceptionOrNull()?.message}",
                    Toast.LENGTH_LONG
                ).show()
            }
        }
    }
    
    private fun removeMember(member: GroupMemberEntity) {
        AlertDialog.Builder(this)
            .setTitle("Rimuovi membro")
            .setMessage("Vuoi rimuovere ${member.displayName} dal gruppo?")
            .setPositiveButton("Rimuovi") { _, _ ->
                lifecycleScope.launch {
                    val result = groupRepository.removeMember(groupId, member.userId)
                    
                    if (result.isSuccess) {
                        Toast.makeText(
                            this@GroupSettingsActivity,
                            "${member.displayName} rimosso",
                            Toast.LENGTH_SHORT
                        ).show()
                    } else {
                        Toast.makeText(
                            this@GroupSettingsActivity,
                            "Errore rimozione membro",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            }
            .setNegativeButton("Annulla", null)
            .show()
    }
    
    private fun changeMemberRole(member: GroupMemberEntity) {
        val newRole = if (member.role == GroupRole.ADMIN) "MEMBER" else "ADMIN"
        val roleText = if (newRole == "ADMIN") "amministratore" else "membro"
        
        AlertDialog.Builder(this)
            .setTitle("Cambia ruolo")
            .setMessage("Vuoi rendere ${member.displayName} $roleText?")
            .setPositiveButton("Conferma") { _, _ ->
                lifecycleScope.launch {
                    val result = groupRepository.updateMemberRole(groupId, member.userId, newRole)
                    
                    if (result.isSuccess) {
                        Toast.makeText(
                            this@GroupSettingsActivity,
                            "Ruolo aggiornato",
                            Toast.LENGTH_SHORT
                        ).show()
                    } else {
                        Toast.makeText(
                            this@GroupSettingsActivity,
                            "Errore aggiornamento ruolo",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            }
            .setNegativeButton("Annulla", null)
            .show()
    }
    
    private fun showDeleteGroupDialog() {
        AlertDialog.Builder(this)
            .setTitle("Elimina gruppo")
            .setMessage("Sei sicuro di voler eliminare questo gruppo per tutti i membri? L'azione � irreversibile.")
            .setPositiveButton("Elimina") { _, _ ->
                deleteGroup()
            }
            .setNegativeButton("Annulla", null)
            .show()
    }
    
    private fun showLeaveGroupDialog() {
        AlertDialog.Builder(this)
            .setTitle("Abbandona gruppo")
            .setMessage("Sei sicuro di voler abbandonare questo gruppo? I dati del gruppo saranno eliminati solo dal tuo dispositivo.")
            .setPositiveButton("Abbandona") { _, _ ->
                leaveGroup()
            }
            .setNegativeButton("Annulla", null)
            .show()
    }
    
    private fun deleteGroup() {
        lifecycleScope.launch {
            val result = groupRepository.deleteGroup(groupId)
            
            if (result.isSuccess) {
                Toast.makeText(this@GroupSettingsActivity, "Gruppo eliminato per tutti i membri", Toast.LENGTH_SHORT).show()
                finish()
            } else {
                Toast.makeText(
                    this@GroupSettingsActivity,
                    "Errore eliminazione gruppo: ${result.exceptionOrNull()?.message}",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }
    }
    
    private fun leaveGroup() {
        lifecycleScope.launch {
            val result = groupRepository.leaveGroup(groupId)
            
            if (result.isSuccess) {
                Toast.makeText(this@GroupSettingsActivity, "Hai abbandonato il gruppo", Toast.LENGTH_SHORT).show()
                finish()
            } else {
                Toast.makeText(
                    this@GroupSettingsActivity,
                    "Errore abbandono gruppo: ${result.exceptionOrNull()?.message}",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }
    }
    
    private fun showAddMembersDialog() {
        val groupName = editTextGroupName.text.toString()
        val dialog = it.fabiodirauso.shutappchat.dialogs.AddMembersDialog.newInstance(groupId, groupName)
        
        dialog.onMembersAdded = { addedUserIds ->
            Log.d("GroupSettings", "Added ${addedUserIds.size} members to group")
            Toast.makeText(this, "${addedUserIds.size} membri aggiunti", Toast.LENGTH_SHORT).show()
            
            // Refresh members list
            lifecycleScope.launch {
                groupRepository.refreshGroupMembers(groupId)
            }
        }
        
        dialog.show(supportFragmentManager, "AddMembersDialog")
    }
    
    override fun onSupportNavigateUp(): Boolean {
        onBackPressed()
        return true
    }
    
    companion object {
        const val EXTRA_GROUP_ID = "group_id"
    }
}

